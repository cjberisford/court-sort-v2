// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model League {
  id        Int        @id @default(autoincrement())
  name      String
  county    String
  divisions Division[] @relation("league_divisions")
  clubs     Club[]     @relation("league_clubs")
}

model Player {
  id         Int    @id @default(autoincrement())
  name       String
  club       Club   @relation(name: "player_club", fields: [clubId], references: [id])
  clubId     Int
  teams      Team[] @relation("team_player")
  home_games Game[] @relation("home_players")
  away_games Game[] @relation("away_players")
  captain_of Team[] @relation("captain")
}

model Club {
  id        Int        @id @default(autoincrement())
  name      String
  location  String
  venue     String
  website   String
  teams     Team[]     @relation("club_team")
  sessions  Training[] // Many-to-Many relationship with Training
  players   Player[]   @relation("player_club")
  league    League     @relation("league_clubs", fields: [league_id], references: [id])
  league_id Int        @default(1)
}

model Team {
  id           Int        @id @default(autoincrement())
  name         String
  captain      Player     @relation("captain", fields: [captain_id], references: [id])
  captain_id   Int
  divisions    Division[]
  players      Player[]   @relation("team_player")
  home_matches Match[]    @relation("matches_home")
  away_matches Match[]    @relation("matches_away")
  club         Club       @relation("club_team", fields: [club_id], references: [id])
  club_id      Int        @unique
}

model Division {
  id        Int     @id @default(autoincrement())
  name      String
  teams     Team[]
  matches   Match[]
  league    League  @relation(name: "league_divisions", fields: [league_id], references: [id])
  league_id Int
}

model Match {
  id           Int       @id @default(autoincrement())
  date         DateTime
  venue        String
  home_team    Team      @relation("matches_home", fields: [homeTeamId], references: [id])
  homeTeamId   Int
  away_team    Team      @relation("matches_away", fields: [awayTeamId], references: [id])
  awayTeamId   Int
  home_rubbers Int
  away_rubbers Int
  games        Game[]    @relation("game_match")
  division     Division? @relation(fields: [divisionId], references: [id])
  divisionId   Int?
}

model Game {
  id           Int       @id @default(autoincrement())
  home_points  Int
  away_points  Int
  match        Match?    @relation("game_match", fields: [matchId], references: [id])
  matchId      Int?
  training     Training? @relation("game_training", fields: [trainingId], references: [id])
  trainingId   Int?
  home_players Player[]  @relation("home_players")
  away_players Player[]  @relation("away_players")
}

model Training {
  id     Int      @id @default(autoincrement())
  date   DateTime
  venue  String
  games  Game[]   @relation("game_training")
  club   Club?    @relation(fields: [clubId], references: [id])
  clubId Int?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
